* Actors
** CLIENT 
   refers to an outside entity interacting with the system via
   http or amqp
** SERVER 
   refers to the main rails app for managing the file/backup 
   database, dealing with the CLIENT. Uses http to interact with the CLIENT.
   Uses amqp to interact with the FS-INTERACTOR. (ruby/postgres/rails-api)
** FS-INTERACTOR (FSI)
   refers to the secondary rails app that has direct access 
   to the file system and runs the AMAZON operations (jruby/derby/rails-api)
** AMAZON
   the external Amazon glacier system
* Scenarios
** CLIENT getting information
*** DONE CLIENT asks SERVER for list of roots
*** DONE CLIENT asks SERVER for list of all backups
*** DONE CLIENT asks SERVER for list of backups for a given root
*** DONE CLIENT asks SERVER for list of backups for a given root and file
*** CLIENT asks SERVER for backups filtered by pending/running/finished/etc.
    need to specify better - this probably needs to wait until we have the
    concept of backing up archives instead of only roots (which we will)
** CLIENT requesting action
*** DONE CLIENT asks SERVER to add a root
    return root information, creating if necessary. Say in a message field
    if it existed or was created.
*** CLIENT asks SERVER to delete a root (?)
    leave unimplemented for now
*** DONE CLIENT asks SERVER to backup a specific root
    should result in a root_backup job being created and/or promoted
*** CLIENT asks SERVER to remove specific files
    should find archives with files, set up new backup(s) to ensure that
    no good files in those are not backed up, then remove archives with
    bad files. This should probably be its own Job type.
** FSI interacting with AMAZON (c.f. existing code for using amazon jar)
*** FSI uploads a tar to AMAZON
*** FSI deletes an archive from AMAZON
*** FSI retrieves an archive from AMAZON
** SERVER interacting with FSI
*** TODO SERVER requests full file tree for a root
*** FSI receives request for full file tree for a root
*** FSI notifies of manifest creation for a root
*** TODO SERVER provides a manifest and requests tarball and upload for an archive
*** FSI receives manifest for upload of an archive
*** FSI notifies of upload for an archive
** SERVER internal actions
*** DONE SERVER converts file manifest into file info updates and creations
*** DONE SERVER uses root/file info information to create archives for backup
*** TODO SERVER manages queue of backups in various states
*** TODO SERVER runs backups in appropriate states
*** TODO SERVER extracts files from archives
*** TODO SERVER recreates root from archives
*** SERVER periodically checks roots to see if backup is required
** FSI internal actions
*** FSI creates manifest for a given root
*** FSI creates a tar for a given manifest
* Models
** SERVER
*** Root
**** has many FileObjects
**** has many Archives
*** Archive
**** has many FileObjects
**** belongs to Root
**** has one ArchiveBackupJob
*** FileObject
**** belongs to Root
**** has many archives
*** ArchiveBackupJob
**** belongs to Archive
*** RootBackupJob
**** belongs to Root
** FSI (how to manage? sqlite, use timeout value in config?; derby?)
*** ManifestJob
*** TarJob
*** UploadJob
* Formats
** FSI file info manifest
   Name Size Last_Modified(s since epoch)
** SERVER tar creation manifest
   NAME

